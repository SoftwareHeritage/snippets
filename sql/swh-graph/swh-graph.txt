#    -*- mode: org -*-
#+PROPERTY: header-args :tangle yes

* preamble
  view to lookup approximate table counts from postgres statistics
  #+begin_src sql
    \timing

    create temporary view counts as
        select relname as tbl, reltuples::bigint as tuples
        from pg_class
        where relnamespace = 'public'::regnamespace
        and relkind = 'r'  -- ordinary table; no indexes, sequences, etc.
        order by relname;

    create temporary table nodes (
        description  text,
        tuples       bigint not null
    );

    create temporary table edges (like nodes);
  #+end_src
* nodes
** content
   content nodes (skipped or not) are the leaves in the graph
   #+begin_src sql
     insert into nodes
         select 'content', sum(tuples)
         from counts
         where tbl in ('content', 'skipped_content');
   #+end_src
** revision
   revision nodes are the inner nodes of history subgraphs
   #+begin_src sql
     insert into nodes
         select 'revision', tuples
         from counts
         where tbl = 'revision';
   #+end_src
** release
   tagged release nodes are graph roots
   #+begin_src sql
     insert into nodes
         select 'release', tuples
         from counts
         where tbl = 'release';
   #+end_src
** directory
   anonymous directory nodes
   #+begin_src sql
     insert into nodes
         select 'directory', tuples
         from counts
         where tbl = 'directory';
   #+end_src
* edges
** revision
*** revision -> revision
    history edges between pairs of revisions
    #+begin_src sql
      insert into edges
          select 'revision->revision', tuples
          from counts
          where tbl = 'revision_history';
    #+end_src
*** revision -> directory
    each revision points to a single directory
    #+begin_src sql
      insert into edges
          select 'revision->directory', tuples
          from counts
          where tbl = 'revision';
    #+end_src
** release -> revision
   one release edge for each release node
   #+begin_src sql
     insert into edges
         select 'release->revision', tuples
         from counts
         where tbl = 'release';
   #+end_src
** directories -> { directory, file, revision }
   one edge for each directory entry (edges pointing to other directories +
   edges pointing to contents + edges pointing to revisions)
   #+begin_src sql
     insert into edges
         with edges as (
             select sum(coalesce(cardinality(dir_entries), 0))  as dir_edges,
                    sum(coalesce(cardinality(file_entries), 0)) as file_edges,
                    sum(coalesce(cardinality(rev_entries), 0))  as rev_edges
             from directory tablesample bernoulli (1.0)
             )
         select 'directory->directory' as description,
                dir_edges * 100 as tuples
         from edges
         union
         select 'directory->file' as description,
                file_edges * 100 as tuples
         from edges
         union
         select 'directory->revision' as description,
                rev_edges * 100 as tuples
         from edges;
   #+end_src
* totals
  #+begin_src sql
    select * from nodes;
    select * from edges;

    select 'nodes' as feat, sum(tuples) as card from nodes
    union
    select 'edges' as feat, sum(tuples) as card from edges;
  #+end_src
